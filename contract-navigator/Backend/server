// Enhanced Backend with Email Notifications
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const nodemailer = require('nodemailer');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// Email configuration
const emailTransporter = nodemailer.createTransporter({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: false,
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
    }
});

// In-memory storage (use database in production)
const companies = new Map();
const users = new Map();
const contracts = new Map();

// Initialize sample data
function initializeSampleData() {
    // Sample company
    const companyId = 'company_001';
    companies.set(companyId, {
        id: companyId,
        name: 'TechCorp Solutions',
        subscription_status: 'active',
        created_at: new Date()
    });

    // Sample users
    const teamEmails = [
        'john@techcorp.com',
        'sarah@techcorp.com', 
        'mike@techcorp.com',
        'lisa@techcorp.com'
    ];

    teamEmails.forEach((email, index) => {
        const userId = `user_${index + 1}`;
        users.set(userId, {
            id: userId,
            company_id: companyId,
            email: email,
            name: email.split('@')[0],
            role: index === 0 ? 'admin' : 'member',
            active: index < 3, // First 3 are active
            created_at: new Date()
        });
    });
}

initializeSampleData();

// File upload configuration
const storage = multer.diskStorage({
    destination: 'uploads/',
    filename: (req, file, cb) => {
        const uniqueName = Date.now() + '-' + Math.round(Math.random() * 1E9) + path.extname(file.originalname);
        cb(null, uniqueName);
    }
});

const upload = multer({ 
    storage: storage,
    limits: { fileSize: 10 * 1024 * 1024 },
    fileFilter: (req, file, cb) => {
        const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('Invalid file type'));
        }
    }
});

// Create uploads directory
const createUploadsDir = async () => {
    try {
        await fs.access('uploads');
    } catch {
        await fs.mkdir('uploads');
    }
};
createUploadsDir();

// Email templates
const EMAIL_TEMPLATES = {
    newContract: (contractData, uploaderName, recipientName) => ({
        subject: `New Contract Analysis Available - ${contractData.filename}`,
        html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 8px; color: white; text-align: center;">
                    <h1 style="margin: 0;">Contract Navigator</h1>
                    <p style="margin: 10px 0 0 0;">New Contract Analysis Ready</p>
                </div>
                
                <div style="padding: 30px; border: 1px solid #e5e7eb; border-top: none; border-radius: 0 0 8px 8px;">
                    <h2 style="color: #1f2937; margin-bottom: 20px;">Hi ${recipientName},</h2>
                    
                    <p style="color: #374151; line-height: 1.6;">A new contract has been analyzed and is ready for your review:</p>
                    
                    <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <table style="width: 100%;">
                            <tr><td style="padding: 5px 0; color: #6b7280;"><strong>üìÑ Contract:</strong></td><td style="padding: 5px 0;">${contractData.filename}</td></tr>
                            <tr><td style="padding: 5px 0; color: #6b7280;"><strong>üë§ Uploaded by:</strong></td><td style="padding: 5px 0;">${uploaderName}</td></tr>
                            <tr><td style="padding: 5px 0; color: #6b7280;"><strong>üìÖ Date:</strong></td><td style="padding: 5px 0;">${new Date().toLocaleDateString()}</td></tr>
                            <tr><td style="padding: 5px 0; color: #6b7280;"><strong>‚öñÔ∏è Risk Level:</strong></td><td style="padding: 5px 0;"><span style="background: #fef3c7; color: #92400e; padding: 4px 8px; border-radius: 4px; font-size: 12px;">${contractData.riskLevel}</span></td></tr>
                        </table>
                    </div>
                    
                    <div style="background: #fef2f2; border-left: 4px solid #ef4444; padding: 15px; margin: 20px 0;">
                        <h4 style="margin: 0 0 10px 0; color: #dc2626;">Key Risks Identified:</h4>
                        <ul style="margin: 0; padding-left: 20px; color: #374151;">
                            ${contractData.risks ? contractData.risks.slice(0, 3).map(risk => 
                                `<li><strong>${risk.type} RISK:</strong> ${risk.title}</li>`
                            ).join('') : '<li>Analysis in progress...</li>'}
                        </ul>
                    </div>
                    
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="${process.env.FRONTEND_URL}/dashboard.html?contract=${contractData.id}" 
                           style="background: #3b82f6; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: 600;">
                            View Complete Analysis
                        </a>
                    </div>
                    
                    <p style="color: #6b7280; font-size: 14px; line-height: 1.6;">
                        Login to your Contract Navigator dashboard to view the complete analysis with highlighted risks, margin notes, and downloadable annotated PDF.
                    </p>
                    
                    <hr style="margin: 30px 0; border: none; height: 1px; background: #e5e7eb;">
                    
                    <p style="color: #9ca3af; font-size: 12px; text-align: center;">
                        Best regards,<br>
                        The Contract Navigator Team<br>
                        <a href="${process.env.FRONTEND_URL}" style="color: #3b82f6;">Contract Navigator</a>
                    </p>
                </div>
            </div>
        `
    }),
    
    teamInvite: (inviterName, companyName, inviteLink) => ({
        subject: `You've been invited to join ${companyName} on Contract Navigator`,
        html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 8px; color: white; text-align: center;">
                    <h1 style="margin: 0;">Contract Navigator</h1>
                    <p style="margin: 10px 0 0 0;">Team Invitation</p>
                </div>
                
                <div style="padding: 30px; border: 1px solid #e5e7eb; border-top: none; border-radius: 0 0 8px 8px;">
                    <h2 style="color: #1f2937; margin-bottom: 20px;">Welcome to the team!</h2>
                    
                    <p style="color: #374151; line-height: 1.6;">${inviterName} has invited you to join <strong>${companyName}</strong> on Contract Navigator.</p>
                    
                    <div style="background: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <h3 style="margin: 0 0 15px 0; color: #059669;">What you'll get access to:</h3>
                        <ul style="margin: 0; padding-left: 20px; color: #374151;">
                            <li>Company contract library with all analyses</li>
                            <li>Real-time notifications for new contracts</li>
                            <li>AI-powered risk analysis and recommendations</li>
                            <li>Annotated PDFs with highlighted risk areas</li>
                            <li>Team collaboration and shared insights</li>
                        </ul>
                    </div>
                    
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="${inviteLink}" 
                           style="background: #22c55e; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: 600;">
                            Accept Invitation & Join Team
                        </a>
                    </div>
                    
                    <p style="color: #6b7280; font-size: 14px; line-height: 1.6;">
                        This invitation will expire in 7 days. If you have any questions, please contact ${inviterName} or reply to this email.
                    </p>
                </div>
            </div>
        `
    })
};

// Email sending functions
async function sendContractNotifications(contractData, uploaderEmail) {
    try {
        const uploader = Array.from(users.values()).find(u => u.email === uploaderEmail);
        if (!uploader) {
            throw new Error('Uploader not found');
        }

        const company = companies.get(uploader.company_id);
        const companyUsers = Array.from(users.values())
            .filter(u => u.company_id === uploader.company_id && u.active && u.email !== uploaderEmail);

        console.log(`üìß Sending notifications to ${companyUsers.length} team members`);

        const emailPromises = companyUsers.map(async (user) => {
            const emailTemplate = EMAIL_TEMPLATES.newContract(contractData, uploader.name, user.name);
            
            try {
                await emailTransporter.sendMail({
                    from: process.env.SMTP_USER,
                    to: user.email,
                    subject: emailTemplate.subject,
                    html: emailTemplate.html
                });
                
                console.log(`‚úÖ Email sent to ${user.email}`);
                return { email: user.email, status: 'sent' };
            } catch (error) {
                console.error(`‚ùå Failed to send email to ${user.email}:`, error);
                return { email: user.email, status: 'failed', error: error.message };
            }
        });

        const emailResults = await Promise.all(emailPromises);
        return emailResults;

    } catch (error) {
        console.error('‚ùå Error sending contract notifications:', error);
        throw error;
    }
}

async function sendTeamInvite(inviterEmail, inviteeEmail, companyId) {
    try {
        const inviter = Array.from(users.values()).find(u => u.email === inviterEmail);
        const company = companies.get(companyId);
        
        const inviteLink = `${process.env.FRONTEND_URL}/join?token=${generateInviteToken(inviteeEmail, companyId)}`;
        const emailTemplate = EMAIL_TEMPLATES.teamInvite(inviter.name, company.name, inviteLink);

        await emailTransporter.sendMail({
            from: process.env.SMTP_USER,
            to: inviteeEmail,
            subject: emailTemplate.subject,
            html: emailTemplate.html
        });

        console.log(`‚úÖ Team invite sent to ${inviteeEmail}`);
        return { status: 'sent', email: inviteeEmail };

    } catch (error) {
        console.error(`‚ùå Failed to send team invite to ${inviteeEmail}:`, error);
        throw error;
    }
}

function generateInviteToken(email, companyId) {
    // In production, use proper JWT or secure token generation
    return Buffer.from(`${email}:${companyId}:${Date.now()}`).toString('base64');
}

// API Routes

// Upload contract with team notifications
app.post('/api/upload-contract', upload.single('contract'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: 'No file uploaded' });
        }

        const contractId = Date.now().toString();
        const uploaderEmail = req.body.uploaderEmail || 'john@techcorp.com'; // In production, get from auth
        
        // Store contract
        const contractData = {
            id: contractId,
            filename: req.file.originalname,
            filePath: req.file.path,
            uploaderEmail: uploaderEmail,
            uploadTime: new Date(),
            status: 'uploaded',
            riskLevel: 'ANALYZING'
        };
        
        contracts.set(contractId, contractData);

        // Send notifications to team (async)
        sendContractNotifications(contractData, uploaderEmail)
            .then(results => {
                console.log('üìß Notification results:', results);
                // Store notification results
                contractData.notificationResults = results;
                contracts.set(contractId, contractData);
            })
            .catch(error => {
                console.error('üìß Notification error:', error);
            });

        res.json({
            contractId: contractId,
            filename: req.file.originalname,
            status: 'uploaded',
            message: 'Contract uploaded successfully. Team notifications are being sent.'
        });

    } catch (error) {
        console.error('Upload error:', error);
        res.status(500).json({ error: 'Upload failed: ' + error.message });
    }
});

// Get contracts for company
app.get('/api/contracts/:companyId', (req, res) => {
    try {
        const { companyId } = req.params;
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        
        const companyContracts = Array.from(contracts.values())
            .filter(contract => {
                const uploader = Array.from(users.values()).find(u => u.email === contract.uploaderEmail);
                return uploader && uploader.company_id === companyId && contract.uploadTime >= thirtyDaysAgo;
            })
            .sort((a, b) => new Date(b.uploadTime) - new Date(a.uploadTime));

        res.json({
            contracts: companyContracts,
            total: companyContracts.length
        });

    } catch (error) {
        console.error('Error fetching contracts:', error);
        res.status(500).json({ error: 'Failed to fetch contracts' });
    }
});

// Get company team members
app.get('/api/team/:companyId', (req, res) => {
    try {
        const { companyId } = req.params;
        const company = companies.get(companyId);
        
        if (!company) {
            return res.status(404).json({ error: 'Company not found' });
        }

        const teamMembers = Array.from(users.values())
            .filter(u => u.company_id === companyId)
            .map(user => ({
                id: user.id,
                email: user.email,
                name: user.name,
                role: user.role,
                active: user.active,
                joinDate: user.created_at
            }));

        res.json({
            company: company,
            teamMembers: teamMembers,
            maxMembers: 5
        });

    } catch (error) {
        console.error('Error fetching team:', error);
        res.status(500).json({ error: 'Failed to fetch team' });
    }
});

// Send team invitation
app.post('/api/invite-team-member', async (req, res) => {
    try {
        const { inviterEmail, inviteeEmail, companyId } = req.body;

        if (!inviterEmail || !inviteeEmail || !companyId) {
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // Check if company has space for more members
        const currentMembers = Array.from(users.values()).filter(u => u.company_id === companyId);
        if (currentMembers.length >= 5) {
            return res.status(400).json({ error: 'Maximum team size reached (5 members)' });
        }

        // Check if user already exists
        const existingUser = Array.from(users.values()).find(u => u.email === inviteeEmail);
        if (existingUser) {
            return res.status(400).json({ error: 'User already exists in system' });
        }

        // Send invitation email
        await sendTeamInvite(inviterEmail, inviteeEmail, companyId);

        // Create pending user record
        const userId = `user_${Date.now()}`;
        users.set(userId, {
            id: userId,
            company_id: companyId,
            email: inviteeEmail,
            name: inviteeEmail.split('@')[0],
            role: 'member',
            active: false, // Will be activated when they accept
            invitedBy: inviterEmail,
            invitedAt: new Date(),
            created_at: new Date()
        });

        res.json({
            message: 'Team invitation sent successfully',
            inviteeEmail: inviteeEmail,
            status: 'invited'
        });

    } catch (error) {
        console.error('Error sending team invitation:', error);
        res.status(500).json({ error: 'Failed to send invitation: ' + error.message });
    }
});

// Test email endpoint
app.post('/api/test-email', async (req, res) => {
    try {
        const { email } = req.body;
        
        await emailTransporter.sendMail({
            from: process.env.SMTP_USER,
            to: email || 'test@example.com',
            subject: 'Contract Navigator - Test Email',
            html: '<h1>Test email from Contract Navigator!</h1><p>Email system is working correctly.</p>'
        });

        res.json({ message: 'Test email sent successfully' });
    } catch (error) {
        console.error('Test email error:', error);
        res.status(500).json({ error: 'Test email failed: ' + error.message });
    }
});

// Health check
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'healthy', 
        timestamp: new Date(),
        activeCompanies: companies.size,
        totalUsers: users.size,
        totalContracts: contracts.size
    });
});

// Start server
app.listen(PORT, () => {
    console.log(`üöÄ Contract Navigator Backend running on port ${PORT}`);
    console.log(`üìß Email system configured for notifications`);
    console.log(`üë• Multi-user system ready`);
    console.log(`üìä Sample data initialized: ${companies.size} companies, ${users.size} users`);
});
